// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package utils

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type BFSS_RESULT int64
const (
  BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE BFSS_RESULT = 1
  BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE BFSS_RESULT = 2
  BFSS_RESULT_BFSS_SUCCESS BFSS_RESULT = 0
  BFSS_RESULT_BFSS_UNKNOWN_ERROR BFSS_RESULT = -255
  BFSS_RESULT_BFSS_PARAM_ERROR BFSS_RESULT = -51
  BFSS_RESULT_BFSS_SCHEME_ERROR BFSS_RESULT = -52
  BFSS_RESULT_BFSS_NO_SPACE BFSS_RESULT = -53
  BFSS_RESULT_BFSS_NO_MEMORY BFSS_RESULT = -54
  BFSS_RESULT_BFSS_TIMEOUT BFSS_RESULT = -55
  BFSS_RESULT_BFSS_NOTFOUND BFSS_RESULT = -60
  BFSS_RESULT_BFSS_DUPLICATED BFSS_RESULT = -61
  BFSS_RESULT_BFSS_COMPLETED BFSS_RESULT = -62
  BFSS_RESULT_BFSS_INCOMPLETED BFSS_RESULT = -63
  BFSS_RESULT_BFSS_DATA_WRITE_FAILED BFSS_RESULT = -70
  BFSS_RESULT_BFSS_DATA_READ_FAILED BFSS_RESULT = -71
  BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED BFSS_RESULT = -72
  BFSS_RESULT_BFSS_DATA_UNINITED BFSS_RESULT = -73
  BFSS_RESULT_BFSS_NO_SND BFSS_RESULT = -74
  BFSS_RESULT_BFSS_SND_SLAVE_SYNC_FAILED BFSS_RESULT = -75
)

func (p BFSS_RESULT) String() string {
  switch p {
  case BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE: return "BFSS_DATA_READ_INCOMPLETE"
  case BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE: return "BFSS_DATA_WRITE_INCOMPLETE"
  case BFSS_RESULT_BFSS_SUCCESS: return "BFSS_SUCCESS"
  case BFSS_RESULT_BFSS_UNKNOWN_ERROR: return "BFSS_UNKNOWN_ERROR"
  case BFSS_RESULT_BFSS_PARAM_ERROR: return "BFSS_PARAM_ERROR"
  case BFSS_RESULT_BFSS_SCHEME_ERROR: return "BFSS_SCHEME_ERROR"
  case BFSS_RESULT_BFSS_NO_SPACE: return "BFSS_NO_SPACE"
  case BFSS_RESULT_BFSS_NO_MEMORY: return "BFSS_NO_MEMORY"
  case BFSS_RESULT_BFSS_TIMEOUT: return "BFSS_TIMEOUT"
  case BFSS_RESULT_BFSS_NOTFOUND: return "BFSS_NOTFOUND"
  case BFSS_RESULT_BFSS_DUPLICATED: return "BFSS_DUPLICATED"
  case BFSS_RESULT_BFSS_COMPLETED: return "BFSS_COMPLETED"
  case BFSS_RESULT_BFSS_INCOMPLETED: return "BFSS_INCOMPLETED"
  case BFSS_RESULT_BFSS_DATA_WRITE_FAILED: return "BFSS_DATA_WRITE_FAILED"
  case BFSS_RESULT_BFSS_DATA_READ_FAILED: return "BFSS_DATA_READ_FAILED"
  case BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED: return "BFSS_DATA_COMPLETE_FAILED"
  case BFSS_RESULT_BFSS_DATA_UNINITED: return "BFSS_DATA_UNINITED"
  case BFSS_RESULT_BFSS_NO_SND: return "BFSS_NO_SND"
  case BFSS_RESULT_BFSS_SND_SLAVE_SYNC_FAILED: return "BFSS_SND_SLAVE_SYNC_FAILED"
  }
  return "<UNSET>"
}

func BFSS_RESULTFromString(s string) (BFSS_RESULT, error) {
  switch s {
  case "BFSS_DATA_READ_INCOMPLETE": return BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE, nil 
  case "BFSS_DATA_WRITE_INCOMPLETE": return BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE, nil 
  case "BFSS_SUCCESS": return BFSS_RESULT_BFSS_SUCCESS, nil 
  case "BFSS_UNKNOWN_ERROR": return BFSS_RESULT_BFSS_UNKNOWN_ERROR, nil 
  case "BFSS_PARAM_ERROR": return BFSS_RESULT_BFSS_PARAM_ERROR, nil 
  case "BFSS_SCHEME_ERROR": return BFSS_RESULT_BFSS_SCHEME_ERROR, nil 
  case "BFSS_NO_SPACE": return BFSS_RESULT_BFSS_NO_SPACE, nil 
  case "BFSS_NO_MEMORY": return BFSS_RESULT_BFSS_NO_MEMORY, nil 
  case "BFSS_TIMEOUT": return BFSS_RESULT_BFSS_TIMEOUT, nil 
  case "BFSS_NOTFOUND": return BFSS_RESULT_BFSS_NOTFOUND, nil 
  case "BFSS_DUPLICATED": return BFSS_RESULT_BFSS_DUPLICATED, nil 
  case "BFSS_COMPLETED": return BFSS_RESULT_BFSS_COMPLETED, nil 
  case "BFSS_INCOMPLETED": return BFSS_RESULT_BFSS_INCOMPLETED, nil 
  case "BFSS_DATA_WRITE_FAILED": return BFSS_RESULT_BFSS_DATA_WRITE_FAILED, nil 
  case "BFSS_DATA_READ_FAILED": return BFSS_RESULT_BFSS_DATA_READ_FAILED, nil 
  case "BFSS_DATA_COMPLETE_FAILED": return BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED, nil 
  case "BFSS_DATA_UNINITED": return BFSS_RESULT_BFSS_DATA_UNINITED, nil 
  case "BFSS_NO_SND": return BFSS_RESULT_BFSS_NO_SND, nil 
  case "BFSS_SND_SLAVE_SYNC_FAILED": return BFSS_RESULT_BFSS_SND_SLAVE_SYNC_FAILED, nil 
  }
  return BFSS_RESULT(0), fmt.Errorf("not a valid BFSS_RESULT string")
}


func BFSS_RESULTPtr(v BFSS_RESULT) *BFSS_RESULT { return &v }

func (p BFSS_RESULT) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BFSS_RESULT) UnmarshalText(text []byte) error {
q, err := BFSS_RESULTFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BFSS_RESULT) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BFSS_RESULT(v)
return nil
}

func (p * BFSS_RESULT) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BFSS_CMD int64
const (
  BFSS_CMD_CMD_SN_MASTER_OFFLINE BFSS_CMD = 1
  BFSS_CMD_CMD_SN_SLAVE_OFFLINE BFSS_CMD = 2
  BFSS_CMD_CMD_SN_BLK_READ BFSS_CMD = 11
  BFSS_CMD_CMD_SN_BLK_WRITE BFSS_CMD = 12
  BFSS_CMD_CMD_SN_RESTORED BFSS_CMD = 13
  BFSS_CMD_CMD_NO_INSTANCE BFSS_CMD = 32767
)

func (p BFSS_CMD) String() string {
  switch p {
  case BFSS_CMD_CMD_SN_MASTER_OFFLINE: return "CMD_SN_MASTER_OFFLINE"
  case BFSS_CMD_CMD_SN_SLAVE_OFFLINE: return "CMD_SN_SLAVE_OFFLINE"
  case BFSS_CMD_CMD_SN_BLK_READ: return "CMD_SN_BLK_READ"
  case BFSS_CMD_CMD_SN_BLK_WRITE: return "CMD_SN_BLK_WRITE"
  case BFSS_CMD_CMD_SN_RESTORED: return "CMD_SN_RESTORED"
  case BFSS_CMD_CMD_NO_INSTANCE: return "CMD_NO_INSTANCE"
  }
  return "<UNSET>"
}

func BFSS_CMDFromString(s string) (BFSS_CMD, error) {
  switch s {
  case "CMD_SN_MASTER_OFFLINE": return BFSS_CMD_CMD_SN_MASTER_OFFLINE, nil 
  case "CMD_SN_SLAVE_OFFLINE": return BFSS_CMD_CMD_SN_SLAVE_OFFLINE, nil 
  case "CMD_SN_BLK_READ": return BFSS_CMD_CMD_SN_BLK_READ, nil 
  case "CMD_SN_BLK_WRITE": return BFSS_CMD_CMD_SN_BLK_WRITE, nil 
  case "CMD_SN_RESTORED": return BFSS_CMD_CMD_SN_RESTORED, nil 
  case "CMD_NO_INSTANCE": return BFSS_CMD_CMD_NO_INSTANCE, nil 
  }
  return BFSS_CMD(0), fmt.Errorf("not a valid BFSS_CMD string")
}


func BFSS_CMDPtr(v BFSS_CMD) *BFSS_CMD { return &v }

func (p BFSS_CMD) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BFSS_CMD) UnmarshalText(text []byte) error {
q, err := BFSS_CMDFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BFSS_CMD) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BFSS_CMD(v)
return nil
}

func (p * BFSS_CMD) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BFSS_SN_NODE_TYPES int64
const (
  BFSS_SN_NODE_TYPES_Standalone BFSS_SN_NODE_TYPES = 0
  BFSS_SN_NODE_TYPES_Master BFSS_SN_NODE_TYPES = 1
  BFSS_SN_NODE_TYPES_Slave BFSS_SN_NODE_TYPES = 2
)

func (p BFSS_SN_NODE_TYPES) String() string {
  switch p {
  case BFSS_SN_NODE_TYPES_Standalone: return "Standalone"
  case BFSS_SN_NODE_TYPES_Master: return "Master"
  case BFSS_SN_NODE_TYPES_Slave: return "Slave"
  }
  return "<UNSET>"
}

func BFSS_SN_NODE_TYPESFromString(s string) (BFSS_SN_NODE_TYPES, error) {
  switch s {
  case "Standalone": return BFSS_SN_NODE_TYPES_Standalone, nil 
  case "Master": return BFSS_SN_NODE_TYPES_Master, nil 
  case "Slave": return BFSS_SN_NODE_TYPES_Slave, nil 
  }
  return BFSS_SN_NODE_TYPES(0), fmt.Errorf("not a valid BFSS_SN_NODE_TYPES string")
}


func BFSS_SN_NODE_TYPESPtr(v BFSS_SN_NODE_TYPES) *BFSS_SN_NODE_TYPES { return &v }

func (p BFSS_SN_NODE_TYPES) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BFSS_SN_NODE_TYPES) UnmarshalText(text []byte) error {
q, err := BFSS_SN_NODE_TYPESFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BFSS_SN_NODE_TYPES) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BFSS_SN_NODE_TYPES(v)
return nil
}

func (p * BFSS_SN_NODE_TYPES) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BFSS_SN_NODE_STATUS int64
const (
  BFSS_SN_NODE_STATUS_Writable BFSS_SN_NODE_STATUS = 0
  BFSS_SN_NODE_STATUS_Readonly BFSS_SN_NODE_STATUS = 1
  BFSS_SN_NODE_STATUS_Unavailable BFSS_SN_NODE_STATUS = 2
)

func (p BFSS_SN_NODE_STATUS) String() string {
  switch p {
  case BFSS_SN_NODE_STATUS_Writable: return "Writable"
  case BFSS_SN_NODE_STATUS_Readonly: return "Readonly"
  case BFSS_SN_NODE_STATUS_Unavailable: return "Unavailable"
  }
  return "<UNSET>"
}

func BFSS_SN_NODE_STATUSFromString(s string) (BFSS_SN_NODE_STATUS, error) {
  switch s {
  case "Writable": return BFSS_SN_NODE_STATUS_Writable, nil 
  case "Readonly": return BFSS_SN_NODE_STATUS_Readonly, nil 
  case "Unavailable": return BFSS_SN_NODE_STATUS_Unavailable, nil 
  }
  return BFSS_SN_NODE_STATUS(0), fmt.Errorf("not a valid BFSS_SN_NODE_STATUS string")
}


func BFSS_SN_NODE_STATUSPtr(v BFSS_SN_NODE_STATUS) *BFSS_SN_NODE_STATUS { return &v }

func (p BFSS_SN_NODE_STATUS) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BFSS_SN_NODE_STATUS) UnmarshalText(text []byte) error {
q, err := BFSS_SN_NODE_STATUSFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BFSS_SN_NODE_STATUS) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BFSS_SN_NODE_STATUS(v)
return nil
}

func (p * BFSS_SN_NODE_STATUS) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Cmd
//  - Param
//  - Data
type BFSS_MESSAGE struct {
  Cmd *BFSS_CMD `thrift:"Cmd,1" db:"Cmd" json:"Cmd,omitempty"`
  Param *int32 `thrift:"Param,2" db:"Param" json:"Param,omitempty"`
  Data []byte `thrift:"Data,3" db:"Data" json:"Data,omitempty"`
}

func NewBFSS_MESSAGE() *BFSS_MESSAGE {
  return &BFSS_MESSAGE{}
}

var BFSS_MESSAGE_Cmd_DEFAULT BFSS_CMD
func (p *BFSS_MESSAGE) GetCmd() BFSS_CMD {
  if !p.IsSetCmd() {
    return BFSS_MESSAGE_Cmd_DEFAULT
  }
return *p.Cmd
}
var BFSS_MESSAGE_Param_DEFAULT int32
func (p *BFSS_MESSAGE) GetParam() int32 {
  if !p.IsSetParam() {
    return BFSS_MESSAGE_Param_DEFAULT
  }
return *p.Param
}
var BFSS_MESSAGE_Data_DEFAULT []byte

func (p *BFSS_MESSAGE) GetData() []byte {
  return p.Data
}
func (p *BFSS_MESSAGE) IsSetCmd() bool {
  return p.Cmd != nil
}

func (p *BFSS_MESSAGE) IsSetParam() bool {
  return p.Param != nil
}

func (p *BFSS_MESSAGE) IsSetData() bool {
  return p.Data != nil
}

func (p *BFSS_MESSAGE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_MESSAGE)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := BFSS_CMD(v)
  p.Cmd = &temp
}
  return nil
}

func (p *BFSS_MESSAGE)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Param = &v
}
  return nil
}

func (p *BFSS_MESSAGE)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_MESSAGE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BFSS_MESSAGE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_MESSAGE) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCmd() {
    if err := oprot.WriteFieldBegin("Cmd", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Cmd: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Cmd)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Cmd (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Cmd: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetParam() {
    if err := oprot.WriteFieldBegin("Param", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Param: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Param)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Param (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Param: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_MESSAGE(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Resp
type MESSAGE_RESULT struct {
  Result_ BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Resp *BFSS_MESSAGE `thrift:"Resp,2" db:"Resp" json:"Resp,omitempty"`
}

func NewMESSAGE_RESULT() *MESSAGE_RESULT {
  return &MESSAGE_RESULT{
Result_: -255,
}
}


func (p *MESSAGE_RESULT) GetResult_() BFSS_RESULT {
  return p.Result_
}
var MESSAGE_RESULT_Resp_DEFAULT *BFSS_MESSAGE
func (p *MESSAGE_RESULT) GetResp() *BFSS_MESSAGE {
  if !p.IsSetResp() {
    return MESSAGE_RESULT_Resp_DEFAULT
  }
return p.Resp
}
func (p *MESSAGE_RESULT) IsSetResp() bool {
  return p.Resp != nil
}

func (p *MESSAGE_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *MESSAGE_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *MESSAGE_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.Resp = &BFSS_MESSAGE{}
  if err := p.Resp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Resp), err)
  }
  return nil
}

func (p *MESSAGE_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MESSAGE_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MESSAGE_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *MESSAGE_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetResp() {
    if err := oprot.WriteFieldBegin("Resp", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Resp: ", p), err) }
    if err := p.Resp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Resp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Resp: ", p), err) }
  }
  return err
}

func (p *MESSAGE_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MESSAGE_RESULT(%+v)", *p)
}

