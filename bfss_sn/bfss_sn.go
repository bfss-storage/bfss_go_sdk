// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bfss_sn

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"bfss/utils"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = utils.GoUnusedProtection__
// Attributes:
//  - Result_
//  - Data
type READ_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Data []byte `thrift:"Data,2" db:"Data" json:"Data,omitempty"`
}

func NewREAD_RESULT() *READ_RESULT {
  return &READ_RESULT{
Result_: -255,
}
}


func (p *READ_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}
var READ_RESULT_Data_DEFAULT []byte

func (p *READ_RESULT) GetData() []byte {
  return p.Data
}
func (p *READ_RESULT) IsSetData() bool {
  return p.Data != nil
}

func (p *READ_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *READ_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *READ_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *READ_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("READ_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *READ_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *READ_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("Data", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Data (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err) }
  }
  return err
}

func (p *READ_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("READ_RESULT(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Hash
type HASH_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Hash string `thrift:"hash,2,required" db:"hash" json:"hash"`
}

func NewHASH_RESULT() *HASH_RESULT {
  return &HASH_RESULT{
Result_: -255,
}
}


func (p *HASH_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}

func (p *HASH_RESULT) GetHash() string {
  return p.Hash
}
func (p *HASH_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetHash bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetHash = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetHash{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hash is not set"));
  }
  return nil
}

func (p *HASH_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *HASH_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *HASH_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HASH_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HASH_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *HASH_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hash: ", p), err) }
  return err
}

func (p *HASH_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HASH_RESULT(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Data
type BLKKEY_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Data []byte `thrift:"Data,2" db:"Data" json:"Data,omitempty"`
}

func NewBLKKEY_RESULT() *BLKKEY_RESULT {
  return &BLKKEY_RESULT{
Result_: -255,
}
}


func (p *BLKKEY_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}
var BLKKEY_RESULT_Data_DEFAULT []byte

func (p *BLKKEY_RESULT) GetData() []byte {
  return p.Data
}
func (p *BLKKEY_RESULT) IsSetData() bool {
  return p.Data != nil
}

func (p *BLKKEY_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *BLKKEY_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *BLKKEY_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BLKKEY_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BLKKEY_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BLKKEY_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *BLKKEY_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("Data", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Data (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err) }
  }
  return err
}

func (p *BLKKEY_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BLKKEY_RESULT(%+v)", *p)
}

type BFSS_SND interface {
  GetVersion(ctx context.Context) (r string, err error)
  // Parameters:
  //  - CmdID
  //  - Param
  //  - Data
  ManageMessage(ctx context.Context, CmdID utils.BFSS_CMD, Param int32, Data []byte) (r *utils.MESSAGE_RESULT, err error)
  // Parameters:
  //  - Index
  //  - Offset
  //  - Data
  //  - Octx
  //  - Flag
  WriteData(ctx context.Context, index int32, offset int32, data []byte, octx []byte, flag int32) (r utils.BFSS_RESULT, err error)
  // Parameters:
  //  - Index
  //  - Offset
  //  - Size
  //  - Flag
  ReadData(ctx context.Context, index int32, offset int32, size int32, flag int32) (r *READ_RESULT, err error)
  // Parameters:
  //  - Octx
  CompleteWriteObj(ctx context.Context, octx []byte) (r *HASH_RESULT, err error)
  // Parameters:
  //  - Index
  GetBlkKey(ctx context.Context, index int32) (r *BLKKEY_RESULT, err error)
}

type BFSS_SNDClient struct {
  c thrift.TClient
}

func NewBFSS_SNDClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BFSS_SNDClient {
  return &BFSS_SNDClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBFSS_SNDClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BFSS_SNDClient {
  return &BFSS_SNDClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBFSS_SNDClient(c thrift.TClient) *BFSS_SNDClient {
  return &BFSS_SNDClient{
    c: c,
  }
}

func (p *BFSS_SNDClient) Client_() thrift.TClient {
  return p.c
}
func (p *BFSS_SNDClient) GetVersion(ctx context.Context) (r string, err error) {
  var _args0 BFSS_SNDGetVersionArgs
  var _result1 BFSS_SNDGetVersionResult
  if err = p.Client_().Call(ctx, "GetVersion", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - CmdID
//  - Param
//  - Data
func (p *BFSS_SNDClient) ManageMessage(ctx context.Context, CmdID utils.BFSS_CMD, Param int32, Data []byte) (r *utils.MESSAGE_RESULT, err error) {
  var _args2 BFSS_SNDManageMessageArgs
  _args2.CmdID = CmdID
  _args2.Param = Param
  _args2.Data = Data
  var _result3 BFSS_SNDManageMessageResult
  if err = p.Client_().Call(ctx, "ManageMessage", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Index
//  - Offset
//  - Data
//  - Octx
//  - Flag
func (p *BFSS_SNDClient) WriteData(ctx context.Context, index int32, offset int32, data []byte, octx []byte, flag int32) (r utils.BFSS_RESULT, err error) {
  var _args4 BFSS_SNDWriteDataArgs
  _args4.Index = index
  _args4.Offset = offset
  _args4.Data = data
  _args4.Octx = octx
  _args4.Flag = flag
  var _result5 BFSS_SNDWriteDataResult
  if err = p.Client_().Call(ctx, "WriteData", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Index
//  - Offset
//  - Size
//  - Flag
func (p *BFSS_SNDClient) ReadData(ctx context.Context, index int32, offset int32, size int32, flag int32) (r *READ_RESULT, err error) {
  var _args6 BFSS_SNDReadDataArgs
  _args6.Index = index
  _args6.Offset = offset
  _args6.Size = size
  _args6.Flag = flag
  var _result7 BFSS_SNDReadDataResult
  if err = p.Client_().Call(ctx, "ReadData", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Octx
func (p *BFSS_SNDClient) CompleteWriteObj(ctx context.Context, octx []byte) (r *HASH_RESULT, err error) {
  var _args8 BFSS_SNDCompleteWriteObjArgs
  _args8.Octx = octx
  var _result9 BFSS_SNDCompleteWriteObjResult
  if err = p.Client_().Call(ctx, "CompleteWriteObj", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Index
func (p *BFSS_SNDClient) GetBlkKey(ctx context.Context, index int32) (r *BLKKEY_RESULT, err error) {
  var _args10 BFSS_SNDGetBlkKeyArgs
  _args10.Index = index
  var _result11 BFSS_SNDGetBlkKeyResult
  if err = p.Client_().Call(ctx, "GetBlkKey", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type BFSS_SNDProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BFSS_SND
}

func (p *BFSS_SNDProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BFSS_SNDProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BFSS_SNDProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBFSS_SNDProcessor(handler BFSS_SND) *BFSS_SNDProcessor {

  self12 := &BFSS_SNDProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["GetVersion"] = &bFSS_SNDProcessorGetVersion{handler:handler}
  self12.processorMap["ManageMessage"] = &bFSS_SNDProcessorManageMessage{handler:handler}
  self12.processorMap["WriteData"] = &bFSS_SNDProcessorWriteData{handler:handler}
  self12.processorMap["ReadData"] = &bFSS_SNDProcessorReadData{handler:handler}
  self12.processorMap["CompleteWriteObj"] = &bFSS_SNDProcessorCompleteWriteObj{handler:handler}
  self12.processorMap["GetBlkKey"] = &bFSS_SNDProcessorGetBlkKey{handler:handler}
return self12
}

func (p *BFSS_SNDProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type bFSS_SNDProcessorGetVersion struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorGetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDGetVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVersion(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVersion: " + err2.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_SNDProcessorManageMessage struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorManageMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDManageMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDManageMessageResult{}
var retval *utils.MESSAGE_RESULT
  var err2 error
  if retval, err2 = p.handler.ManageMessage(ctx, args.CmdID, args.Param, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ManageMessage: " + err2.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ManageMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_SNDProcessorWriteData struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorWriteData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDWriteDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("WriteData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDWriteDataResult{}
var retval utils.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.WriteData(ctx, args.Index, args.Offset, args.Data, args.Octx, args.Flag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteData: " + err2.Error())
    oprot.WriteMessageBegin("WriteData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("WriteData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_SNDProcessorReadData struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorReadData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDReadDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDReadDataResult{}
var retval *READ_RESULT
  var err2 error
  if retval, err2 = p.handler.ReadData(ctx, args.Index, args.Offset, args.Size, args.Flag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadData: " + err2.Error())
    oprot.WriteMessageBegin("ReadData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_SNDProcessorCompleteWriteObj struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorCompleteWriteObj) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDCompleteWriteObjArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CompleteWriteObj", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDCompleteWriteObjResult{}
var retval *HASH_RESULT
  var err2 error
  if retval, err2 = p.handler.CompleteWriteObj(ctx, args.Octx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CompleteWriteObj: " + err2.Error())
    oprot.WriteMessageBegin("CompleteWriteObj", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CompleteWriteObj", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_SNDProcessorGetBlkKey struct {
  handler BFSS_SND
}

func (p *bFSS_SNDProcessorGetBlkKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_SNDGetBlkKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBlkKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_SNDGetBlkKeyResult{}
var retval *BLKKEY_RESULT
  var err2 error
  if retval, err2 = p.handler.GetBlkKey(ctx, args.Index); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBlkKey: " + err2.Error())
    oprot.WriteMessageBegin("GetBlkKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBlkKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BFSS_SNDGetVersionArgs struct {
}

func NewBFSS_SNDGetVersionArgs() *BFSS_SNDGetVersionArgs {
  return &BFSS_SNDGetVersionArgs{}
}

func (p *BFSS_SNDGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDGetVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDGetVersionResult() *BFSS_SNDGetVersionResult {
  return &BFSS_SNDGetVersionResult{}
}

var BFSS_SNDGetVersionResult_Success_DEFAULT string
func (p *BFSS_SNDGetVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BFSS_SNDGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_SNDGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BFSS_SNDGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDGetVersionResult(%+v)", *p)
}

// Attributes:
//  - CmdID
//  - Param
//  - Data
type BFSS_SNDManageMessageArgs struct {
  CmdID utils.BFSS_CMD `thrift:"CmdID,1" db:"CmdID" json:"CmdID"`
  Param int32 `thrift:"Param,2" db:"Param" json:"Param"`
  Data []byte `thrift:"Data,3" db:"Data" json:"Data"`
}

func NewBFSS_SNDManageMessageArgs() *BFSS_SNDManageMessageArgs {
  return &BFSS_SNDManageMessageArgs{}
}


func (p *BFSS_SNDManageMessageArgs) GetCmdID() utils.BFSS_CMD {
  return p.CmdID
}

func (p *BFSS_SNDManageMessageArgs) GetParam() int32 {
  return p.Param
}

func (p *BFSS_SNDManageMessageArgs) GetData() []byte {
  return p.Data
}
func (p *BFSS_SNDManageMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDManageMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_CMD(v)
  p.CmdID = temp
}
  return nil
}

func (p *BFSS_SNDManageMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *BFSS_SNDManageMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_SNDManageMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDManageMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CmdID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CmdID: ", p), err) }
  if err := oprot.WriteI32(int32(p.CmdID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CmdID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CmdID: ", p), err) }
  return err
}

func (p *BFSS_SNDManageMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Param", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Param: ", p), err) }
  if err := oprot.WriteI32(int32(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Param (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Param: ", p), err) }
  return err
}

func (p *BFSS_SNDManageMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err) }
  return err
}

func (p *BFSS_SNDManageMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDManageMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDManageMessageResult struct {
  Success *utils.MESSAGE_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDManageMessageResult() *BFSS_SNDManageMessageResult {
  return &BFSS_SNDManageMessageResult{}
}

var BFSS_SNDManageMessageResult_Success_DEFAULT *utils.MESSAGE_RESULT
func (p *BFSS_SNDManageMessageResult) GetSuccess() *utils.MESSAGE_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_SNDManageMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_SNDManageMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDManageMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDManageMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &utils.MESSAGE_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_SNDManageMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDManageMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDManageMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDManageMessageResult(%+v)", *p)
}

// Attributes:
//  - Index
//  - Offset
//  - Data
//  - Octx
//  - Flag
type BFSS_SNDWriteDataArgs struct {
  Index int32 `thrift:"index,1" db:"index" json:"index"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Data []byte `thrift:"data,3" db:"data" json:"data"`
  Octx []byte `thrift:"octx,4" db:"octx" json:"octx"`
  Flag int32 `thrift:"flag,5" db:"flag" json:"flag"`
}

func NewBFSS_SNDWriteDataArgs() *BFSS_SNDWriteDataArgs {
  return &BFSS_SNDWriteDataArgs{}
}


func (p *BFSS_SNDWriteDataArgs) GetIndex() int32 {
  return p.Index
}

func (p *BFSS_SNDWriteDataArgs) GetOffset() int32 {
  return p.Offset
}

func (p *BFSS_SNDWriteDataArgs) GetData() []byte {
  return p.Data
}

func (p *BFSS_SNDWriteDataArgs) GetOctx() []byte {
  return p.Octx
}

func (p *BFSS_SNDWriteDataArgs) GetFlag() int32 {
  return p.Flag
}
func (p *BFSS_SNDWriteDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDWriteDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *BFSS_SNDWriteDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_SNDWriteDataArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_SNDWriteDataArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Octx = v
}
  return nil
}

func (p *BFSS_SNDWriteDataArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *BFSS_SNDWriteDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDWriteDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  return err
}

func (p *BFSS_SNDWriteDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *BFSS_SNDWriteDataArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *BFSS_SNDWriteDataArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("octx", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:octx: ", p), err) }
  if err := oprot.WriteBinary(p.Octx); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.octx (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:octx: ", p), err) }
  return err
}

func (p *BFSS_SNDWriteDataArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flag: ", p), err) }
  return err
}

func (p *BFSS_SNDWriteDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDWriteDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDWriteDataResult struct {
  Success *utils.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDWriteDataResult() *BFSS_SNDWriteDataResult {
  return &BFSS_SNDWriteDataResult{}
}

var BFSS_SNDWriteDataResult_Success_DEFAULT utils.BFSS_RESULT
func (p *BFSS_SNDWriteDataResult) GetSuccess() utils.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_SNDWriteDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_SNDWriteDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDWriteDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDWriteDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_SNDWriteDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDWriteDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDWriteDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDWriteDataResult(%+v)", *p)
}

// Attributes:
//  - Index
//  - Offset
//  - Size
//  - Flag
type BFSS_SNDReadDataArgs struct {
  Index int32 `thrift:"index,1" db:"index" json:"index"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Flag int32 `thrift:"flag,4" db:"flag" json:"flag"`
}

func NewBFSS_SNDReadDataArgs() *BFSS_SNDReadDataArgs {
  return &BFSS_SNDReadDataArgs{}
}


func (p *BFSS_SNDReadDataArgs) GetIndex() int32 {
  return p.Index
}

func (p *BFSS_SNDReadDataArgs) GetOffset() int32 {
  return p.Offset
}

func (p *BFSS_SNDReadDataArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_SNDReadDataArgs) GetFlag() int32 {
  return p.Flag
}
func (p *BFSS_SNDReadDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDReadDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *BFSS_SNDReadDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_SNDReadDataArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_SNDReadDataArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *BFSS_SNDReadDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDReadDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  return err
}

func (p *BFSS_SNDReadDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *BFSS_SNDReadDataArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *BFSS_SNDReadDataArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flag: ", p), err) }
  return err
}

func (p *BFSS_SNDReadDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDReadDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDReadDataResult struct {
  Success *READ_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDReadDataResult() *BFSS_SNDReadDataResult {
  return &BFSS_SNDReadDataResult{}
}

var BFSS_SNDReadDataResult_Success_DEFAULT *READ_RESULT
func (p *BFSS_SNDReadDataResult) GetSuccess() *READ_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_SNDReadDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_SNDReadDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDReadDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDReadDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &READ_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_SNDReadDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDReadDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDReadDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDReadDataResult(%+v)", *p)
}

// Attributes:
//  - Octx
type BFSS_SNDCompleteWriteObjArgs struct {
  Octx []byte `thrift:"octx,1" db:"octx" json:"octx"`
}

func NewBFSS_SNDCompleteWriteObjArgs() *BFSS_SNDCompleteWriteObjArgs {
  return &BFSS_SNDCompleteWriteObjArgs{}
}


func (p *BFSS_SNDCompleteWriteObjArgs) GetOctx() []byte {
  return p.Octx
}
func (p *BFSS_SNDCompleteWriteObjArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDCompleteWriteObjArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Octx = v
}
  return nil
}

func (p *BFSS_SNDCompleteWriteObjArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteWriteObj_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDCompleteWriteObjArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("octx", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:octx: ", p), err) }
  if err := oprot.WriteBinary(p.Octx); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.octx (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:octx: ", p), err) }
  return err
}

func (p *BFSS_SNDCompleteWriteObjArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDCompleteWriteObjArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDCompleteWriteObjResult struct {
  Success *HASH_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDCompleteWriteObjResult() *BFSS_SNDCompleteWriteObjResult {
  return &BFSS_SNDCompleteWriteObjResult{}
}

var BFSS_SNDCompleteWriteObjResult_Success_DEFAULT *HASH_RESULT
func (p *BFSS_SNDCompleteWriteObjResult) GetSuccess() *HASH_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_SNDCompleteWriteObjResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_SNDCompleteWriteObjResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDCompleteWriteObjResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDCompleteWriteObjResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HASH_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_SNDCompleteWriteObjResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteWriteObj_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDCompleteWriteObjResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDCompleteWriteObjResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDCompleteWriteObjResult(%+v)", *p)
}

// Attributes:
//  - Index
type BFSS_SNDGetBlkKeyArgs struct {
  Index int32 `thrift:"index,1" db:"index" json:"index"`
}

func NewBFSS_SNDGetBlkKeyArgs() *BFSS_SNDGetBlkKeyArgs {
  return &BFSS_SNDGetBlkKeyArgs{}
}


func (p *BFSS_SNDGetBlkKeyArgs) GetIndex() int32 {
  return p.Index
}
func (p *BFSS_SNDGetBlkKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDGetBlkKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *BFSS_SNDGetBlkKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlkKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDGetBlkKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  return err
}

func (p *BFSS_SNDGetBlkKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDGetBlkKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_SNDGetBlkKeyResult struct {
  Success *BLKKEY_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_SNDGetBlkKeyResult() *BFSS_SNDGetBlkKeyResult {
  return &BFSS_SNDGetBlkKeyResult{}
}

var BFSS_SNDGetBlkKeyResult_Success_DEFAULT *BLKKEY_RESULT
func (p *BFSS_SNDGetBlkKeyResult) GetSuccess() *BLKKEY_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_SNDGetBlkKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_SNDGetBlkKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_SNDGetBlkKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_SNDGetBlkKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BLKKEY_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_SNDGetBlkKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlkKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_SNDGetBlkKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_SNDGetBlkKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_SNDGetBlkKeyResult(%+v)", *p)
}


