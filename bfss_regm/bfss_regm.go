// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bfss_regm

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"bfss/utils"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = utils.GoUnusedProtection__
// Attributes:
//  - URI
//  - BlkCount
//  - Status
//  - Desc
type VOLUME_SLAVE_INFO struct {
  URI string `thrift:"Uri,1,required" db:"Uri" json:"Uri"`
  BlkCount int32 `thrift:"BlkCount,2,required" db:"BlkCount" json:"BlkCount"`
  Status utils.BFSS_SN_NODE_STATUS `thrift:"Status,3,required" db:"Status" json:"Status"`
  Desc *string `thrift:"Desc,4" db:"Desc" json:"Desc,omitempty"`
}

func NewVOLUME_SLAVE_INFO() *VOLUME_SLAVE_INFO {
  return &VOLUME_SLAVE_INFO{}
}


func (p *VOLUME_SLAVE_INFO) GetURI() string {
  return p.URI
}

func (p *VOLUME_SLAVE_INFO) GetBlkCount() int32 {
  return p.BlkCount
}

func (p *VOLUME_SLAVE_INFO) GetStatus() utils.BFSS_SN_NODE_STATUS {
  return p.Status
}
var VOLUME_SLAVE_INFO_Desc_DEFAULT string
func (p *VOLUME_SLAVE_INFO) GetDesc() string {
  if !p.IsSetDesc() {
    return VOLUME_SLAVE_INFO_Desc_DEFAULT
  }
return *p.Desc
}
func (p *VOLUME_SLAVE_INFO) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *VOLUME_SLAVE_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetURI bool = false;
  var issetBlkCount bool = false;
  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetURI = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBlkCount = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetStatus = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetURI{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field URI is not set"));
  }
  if !issetBlkCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkCount is not set"));
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *VOLUME_SLAVE_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *VOLUME_SLAVE_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlkCount = v
}
  return nil
}

func (p *VOLUME_SLAVE_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := utils.BFSS_SN_NODE_STATUS(v)
  p.Status = temp
}
  return nil
}

func (p *VOLUME_SLAVE_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *VOLUME_SLAVE_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VOLUME_SLAVE_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VOLUME_SLAVE_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Uri", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Uri: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Uri (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Uri: ", p), err) }
  return err
}

func (p *VOLUME_SLAVE_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BlkCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.BlkCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BlkCount: ", p), err) }
  return err
}

func (p *VOLUME_SLAVE_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Status: ", p), err) }
  return err
}

func (p *VOLUME_SLAVE_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin("Desc", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Desc: ", p), err) }
    if err := oprot.WriteString(string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Desc (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Desc: ", p), err) }
  }
  return err
}

func (p *VOLUME_SLAVE_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VOLUME_SLAVE_INFO(%+v)", *p)
}

// Attributes:
//  - VolumeId
//  - BlkCount
//  - UsedCount
//  - Type
//  - Status
//  - URI
//  - Desc
//  - Slave
type VOLUME_INFO struct {
  VolumeId int32 `thrift:"VolumeId,1,required" db:"VolumeId" json:"VolumeId"`
  BlkCount int32 `thrift:"BlkCount,2,required" db:"BlkCount" json:"BlkCount"`
  UsedCount int32 `thrift:"UsedCount,3,required" db:"UsedCount" json:"UsedCount"`
  Type utils.BFSS_SN_NODE_TYPES `thrift:"Type,4,required" db:"Type" json:"Type"`
  Status utils.BFSS_SN_NODE_STATUS `thrift:"Status,5,required" db:"Status" json:"Status"`
  URI string `thrift:"Uri,6,required" db:"Uri" json:"Uri"`
  Desc *string `thrift:"Desc,7" db:"Desc" json:"Desc,omitempty"`
  Slave *VOLUME_SLAVE_INFO `thrift:"Slave,8" db:"Slave" json:"Slave,omitempty"`
}

func NewVOLUME_INFO() *VOLUME_INFO {
  return &VOLUME_INFO{}
}


func (p *VOLUME_INFO) GetVolumeId() int32 {
  return p.VolumeId
}

func (p *VOLUME_INFO) GetBlkCount() int32 {
  return p.BlkCount
}

func (p *VOLUME_INFO) GetUsedCount() int32 {
  return p.UsedCount
}

func (p *VOLUME_INFO) GetType() utils.BFSS_SN_NODE_TYPES {
  return p.Type
}

func (p *VOLUME_INFO) GetStatus() utils.BFSS_SN_NODE_STATUS {
  return p.Status
}

func (p *VOLUME_INFO) GetURI() string {
  return p.URI
}
var VOLUME_INFO_Desc_DEFAULT string
func (p *VOLUME_INFO) GetDesc() string {
  if !p.IsSetDesc() {
    return VOLUME_INFO_Desc_DEFAULT
  }
return *p.Desc
}
var VOLUME_INFO_Slave_DEFAULT *VOLUME_SLAVE_INFO
func (p *VOLUME_INFO) GetSlave() *VOLUME_SLAVE_INFO {
  if !p.IsSetSlave() {
    return VOLUME_INFO_Slave_DEFAULT
  }
return p.Slave
}
func (p *VOLUME_INFO) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *VOLUME_INFO) IsSetSlave() bool {
  return p.Slave != nil
}

func (p *VOLUME_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVolumeId bool = false;
  var issetBlkCount bool = false;
  var issetUsedCount bool = false;
  var issetType bool = false;
  var issetStatus bool = false;
  var issetURI bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetVolumeId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBlkCount = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetUsedCount = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetStatus = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetURI = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVolumeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VolumeId is not set"));
  }
  if !issetBlkCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkCount is not set"));
  }
  if !issetUsedCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UsedCount is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  if !issetURI{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field URI is not set"));
  }
  return nil
}

func (p *VOLUME_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *VOLUME_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlkCount = v
}
  return nil
}

func (p *VOLUME_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UsedCount = v
}
  return nil
}

func (p *VOLUME_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := utils.BFSS_SN_NODE_TYPES(v)
  p.Type = temp
}
  return nil
}

func (p *VOLUME_INFO)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := utils.BFSS_SN_NODE_STATUS(v)
  p.Status = temp
}
  return nil
}

func (p *VOLUME_INFO)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *VOLUME_INFO)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *VOLUME_INFO)  ReadField8(iprot thrift.TProtocol) error {
  p.Slave = &VOLUME_SLAVE_INFO{}
  if err := p.Slave.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Slave), err)
  }
  return nil
}

func (p *VOLUME_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VOLUME_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VOLUME_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:VolumeId: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BlkCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.BlkCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BlkCount: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UsedCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UsedCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.UsedCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UsedCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UsedCount: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Type: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Status: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Uri", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Uri: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Uri (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Uri: ", p), err) }
  return err
}

func (p *VOLUME_INFO) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin("Desc", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Desc: ", p), err) }
    if err := oprot.WriteString(string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Desc (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Desc: ", p), err) }
  }
  return err
}

func (p *VOLUME_INFO) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetSlave() {
    if err := oprot.WriteFieldBegin("Slave", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Slave: ", p), err) }
    if err := p.Slave.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Slave), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Slave: ", p), err) }
  }
  return err
}

func (p *VOLUME_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VOLUME_INFO(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Volume
type VOLUME_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Volume *VOLUME_INFO `thrift:"Volume,2" db:"Volume" json:"Volume,omitempty"`
}

func NewVOLUME_RESULT() *VOLUME_RESULT {
  return &VOLUME_RESULT{
Result_: -255,
}
}


func (p *VOLUME_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}
var VOLUME_RESULT_Volume_DEFAULT *VOLUME_INFO
func (p *VOLUME_RESULT) GetVolume() *VOLUME_INFO {
  if !p.IsSetVolume() {
    return VOLUME_RESULT_Volume_DEFAULT
  }
return p.Volume
}
func (p *VOLUME_RESULT) IsSetVolume() bool {
  return p.Volume != nil
}

func (p *VOLUME_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *VOLUME_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *VOLUME_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.Volume = &VOLUME_INFO{}
  if err := p.Volume.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Volume), err)
  }
  return nil
}

func (p *VOLUME_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VOLUME_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VOLUME_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *VOLUME_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVolume() {
    if err := oprot.WriteFieldBegin("Volume", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Volume: ", p), err) }
    if err := p.Volume.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Volume), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Volume: ", p), err) }
  }
  return err
}

func (p *VOLUME_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VOLUME_RESULT(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Volumes
type ALL_VOLUME_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Volumes []*VOLUME_INFO `thrift:"Volumes,2" db:"Volumes" json:"Volumes,omitempty"`
}

func NewALL_VOLUME_RESULT() *ALL_VOLUME_RESULT {
  return &ALL_VOLUME_RESULT{
Result_: -255,
}
}


func (p *ALL_VOLUME_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}
var ALL_VOLUME_RESULT_Volumes_DEFAULT []*VOLUME_INFO

func (p *ALL_VOLUME_RESULT) GetVolumes() []*VOLUME_INFO {
  return p.Volumes
}
func (p *ALL_VOLUME_RESULT) IsSetVolumes() bool {
  return p.Volumes != nil
}

func (p *ALL_VOLUME_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ALL_VOLUME_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *ALL_VOLUME_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VOLUME_INFO, 0, size)
  p.Volumes =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &VOLUME_INFO{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Volumes = append(p.Volumes, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ALL_VOLUME_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ALL_VOLUME_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ALL_VOLUME_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *ALL_VOLUME_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVolumes() {
    if err := oprot.WriteFieldBegin("Volumes", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Volumes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Volumes {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Volumes: ", p), err) }
  }
  return err
}

func (p *ALL_VOLUME_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ALL_VOLUME_RESULT(%+v)", *p)
}

// Attributes:
//  - Type
//  - Version
//  - URI
//  - VolumeId
//  - BlkCount
//  - Desc
type REGISTER_VOLUME_INFO struct {
  Type utils.BFSS_SN_NODE_TYPES `thrift:"Type,1,required" db:"Type" json:"Type"`
  Version *string `thrift:"Version,2" db:"Version" json:"Version,omitempty"`
  URI string `thrift:"Uri,3,required" db:"Uri" json:"Uri"`
  VolumeId int32 `thrift:"VolumeId,4,required" db:"VolumeId" json:"VolumeId"`
  BlkCount int32 `thrift:"BlkCount,5,required" db:"BlkCount" json:"BlkCount"`
  Desc *string `thrift:"Desc,6" db:"Desc" json:"Desc,omitempty"`
}

func NewREGISTER_VOLUME_INFO() *REGISTER_VOLUME_INFO {
  return &REGISTER_VOLUME_INFO{}
}


func (p *REGISTER_VOLUME_INFO) GetType() utils.BFSS_SN_NODE_TYPES {
  return p.Type
}
var REGISTER_VOLUME_INFO_Version_DEFAULT string
func (p *REGISTER_VOLUME_INFO) GetVersion() string {
  if !p.IsSetVersion() {
    return REGISTER_VOLUME_INFO_Version_DEFAULT
  }
return *p.Version
}

func (p *REGISTER_VOLUME_INFO) GetURI() string {
  return p.URI
}

func (p *REGISTER_VOLUME_INFO) GetVolumeId() int32 {
  return p.VolumeId
}

func (p *REGISTER_VOLUME_INFO) GetBlkCount() int32 {
  return p.BlkCount
}
var REGISTER_VOLUME_INFO_Desc_DEFAULT string
func (p *REGISTER_VOLUME_INFO) GetDesc() string {
  if !p.IsSetDesc() {
    return REGISTER_VOLUME_INFO_Desc_DEFAULT
  }
return *p.Desc
}
func (p *REGISTER_VOLUME_INFO) IsSetVersion() bool {
  return p.Version != nil
}

func (p *REGISTER_VOLUME_INFO) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *REGISTER_VOLUME_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetURI bool = false;
  var issetVolumeId bool = false;
  var issetBlkCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetURI = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetVolumeId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetBlkCount = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetURI{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field URI is not set"));
  }
  if !issetVolumeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VolumeId is not set"));
  }
  if !issetBlkCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkCount is not set"));
  }
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_SN_NODE_TYPES(v)
  p.Type = temp
}
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BlkCount = v
}
  return nil
}

func (p *REGISTER_VOLUME_INFO)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *REGISTER_VOLUME_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("REGISTER_VOLUME_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *REGISTER_VOLUME_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Type: ", p), err) }
  return err
}

func (p *REGISTER_VOLUME_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("Version", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Version: ", p), err) }
    if err := oprot.WriteString(string(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Version: ", p), err) }
  }
  return err
}

func (p *REGISTER_VOLUME_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Uri", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Uri: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Uri (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Uri: ", p), err) }
  return err
}

func (p *REGISTER_VOLUME_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:VolumeId: ", p), err) }
  return err
}

func (p *REGISTER_VOLUME_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkCount", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BlkCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.BlkCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BlkCount: ", p), err) }
  return err
}

func (p *REGISTER_VOLUME_INFO) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin("Desc", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Desc: ", p), err) }
    if err := oprot.WriteString(string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Desc (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Desc: ", p), err) }
  }
  return err
}

func (p *REGISTER_VOLUME_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("REGISTER_VOLUME_INFO(%+v)", *p)
}

// Attributes:
//  - Type
//  - Status
//  - VolumeId
type UPDATE_VOLUME_STATUS struct {
  Type utils.BFSS_SN_NODE_TYPES `thrift:"Type,1,required" db:"Type" json:"Type"`
  Status utils.BFSS_SN_NODE_STATUS `thrift:"Status,2,required" db:"Status" json:"Status"`
  VolumeId int32 `thrift:"VolumeId,3,required" db:"VolumeId" json:"VolumeId"`
}

func NewUPDATE_VOLUME_STATUS() *UPDATE_VOLUME_STATUS {
  return &UPDATE_VOLUME_STATUS{}
}


func (p *UPDATE_VOLUME_STATUS) GetType() utils.BFSS_SN_NODE_TYPES {
  return p.Type
}

func (p *UPDATE_VOLUME_STATUS) GetStatus() utils.BFSS_SN_NODE_STATUS {
  return p.Status
}

func (p *UPDATE_VOLUME_STATUS) GetVolumeId() int32 {
  return p.VolumeId
}
func (p *UPDATE_VOLUME_STATUS) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetStatus bool = false;
  var issetVolumeId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetStatus = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetVolumeId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  if !issetVolumeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VolumeId is not set"));
  }
  return nil
}

func (p *UPDATE_VOLUME_STATUS)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_SN_NODE_TYPES(v)
  p.Type = temp
}
  return nil
}

func (p *UPDATE_VOLUME_STATUS)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := utils.BFSS_SN_NODE_STATUS(v)
  p.Status = temp
}
  return nil
}

func (p *UPDATE_VOLUME_STATUS)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *UPDATE_VOLUME_STATUS) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UPDATE_VOLUME_STATUS"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UPDATE_VOLUME_STATUS) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Type: ", p), err) }
  return err
}

func (p *UPDATE_VOLUME_STATUS) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Status: ", p), err) }
  return err
}

func (p *UPDATE_VOLUME_STATUS) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:VolumeId: ", p), err) }
  return err
}

func (p *UPDATE_VOLUME_STATUS) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UPDATE_VOLUME_STATUS(%+v)", *p)
}

// Attributes:
//  - VolumeId
//  - BeginIndex
//  - BeginOffset
//  - EndIndex
//  - EndOffset
type ALLOCATED_INFO struct {
  VolumeId int32 `thrift:"VolumeId,1,required" db:"VolumeId" json:"VolumeId"`
  BeginIndex int32 `thrift:"BeginIndex,2,required" db:"BeginIndex" json:"BeginIndex"`
  BeginOffset int32 `thrift:"BeginOffset,3,required" db:"BeginOffset" json:"BeginOffset"`
  EndIndex int32 `thrift:"EndIndex,4,required" db:"EndIndex" json:"EndIndex"`
  EndOffset int32 `thrift:"EndOffset,5,required" db:"EndOffset" json:"EndOffset"`
}

func NewALLOCATED_INFO() *ALLOCATED_INFO {
  return &ALLOCATED_INFO{}
}


func (p *ALLOCATED_INFO) GetVolumeId() int32 {
  return p.VolumeId
}

func (p *ALLOCATED_INFO) GetBeginIndex() int32 {
  return p.BeginIndex
}

func (p *ALLOCATED_INFO) GetBeginOffset() int32 {
  return p.BeginOffset
}

func (p *ALLOCATED_INFO) GetEndIndex() int32 {
  return p.EndIndex
}

func (p *ALLOCATED_INFO) GetEndOffset() int32 {
  return p.EndOffset
}
func (p *ALLOCATED_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVolumeId bool = false;
  var issetBeginIndex bool = false;
  var issetBeginOffset bool = false;
  var issetEndIndex bool = false;
  var issetEndOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetVolumeId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBeginIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetBeginOffset = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetEndIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetEndOffset = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVolumeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VolumeId is not set"));
  }
  if !issetBeginIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BeginIndex is not set"));
  }
  if !issetBeginOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BeginOffset is not set"));
  }
  if !issetEndIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndIndex is not set"));
  }
  if !issetEndOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndOffset is not set"));
  }
  return nil
}

func (p *ALLOCATED_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *ALLOCATED_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BeginIndex = v
}
  return nil
}

func (p *ALLOCATED_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BeginOffset = v
}
  return nil
}

func (p *ALLOCATED_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndIndex = v
}
  return nil
}

func (p *ALLOCATED_INFO)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EndOffset = v
}
  return nil
}

func (p *ALLOCATED_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ALLOCATED_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ALLOCATED_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:VolumeId: ", p), err) }
  return err
}

func (p *ALLOCATED_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BeginIndex", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BeginIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.BeginIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BeginIndex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BeginIndex: ", p), err) }
  return err
}

func (p *ALLOCATED_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BeginOffset", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:BeginOffset: ", p), err) }
  if err := oprot.WriteI32(int32(p.BeginOffset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BeginOffset (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:BeginOffset: ", p), err) }
  return err
}

func (p *ALLOCATED_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EndIndex", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:EndIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.EndIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EndIndex (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:EndIndex: ", p), err) }
  return err
}

func (p *ALLOCATED_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EndOffset", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:EndOffset: ", p), err) }
  if err := oprot.WriteI32(int32(p.EndOffset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EndOffset (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:EndOffset: ", p), err) }
  return err
}

func (p *ALLOCATED_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ALLOCATED_INFO(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Allocated
type ALLOCATED_RESULT struct {
  Result_ utils.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Allocated *ALLOCATED_INFO `thrift:"Allocated,2" db:"Allocated" json:"Allocated,omitempty"`
}

func NewALLOCATED_RESULT() *ALLOCATED_RESULT {
  return &ALLOCATED_RESULT{
Result_: -255,
}
}


func (p *ALLOCATED_RESULT) GetResult_() utils.BFSS_RESULT {
  return p.Result_
}
var ALLOCATED_RESULT_Allocated_DEFAULT *ALLOCATED_INFO
func (p *ALLOCATED_RESULT) GetAllocated() *ALLOCATED_INFO {
  if !p.IsSetAllocated() {
    return ALLOCATED_RESULT_Allocated_DEFAULT
  }
return p.Allocated
}
func (p *ALLOCATED_RESULT) IsSetAllocated() bool {
  return p.Allocated != nil
}

func (p *ALLOCATED_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ALLOCATED_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *ALLOCATED_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.Allocated = &ALLOCATED_INFO{}
  if err := p.Allocated.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Allocated), err)
  }
  return nil
}

func (p *ALLOCATED_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ALLOCATED_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ALLOCATED_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *ALLOCATED_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllocated() {
    if err := oprot.WriteFieldBegin("Allocated", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Allocated: ", p), err) }
    if err := p.Allocated.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Allocated), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Allocated: ", p), err) }
  }
  return err
}

func (p *ALLOCATED_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ALLOCATED_RESULT(%+v)", *p)
}

type BFSS_REGMD interface {
  GetVersion(ctx context.Context) (r string, err error)
  // Parameters:
  //  - CmdId
  //  - Param
  //  - Data
  ManageMessage(ctx context.Context, CmdId utils.BFSS_CMD, Param int32, Data []byte) (r *utils.MESSAGE_RESULT, err error)
  // Parameters:
  //  - VolumeInfo
  RegisterVolume(ctx context.Context, VolumeInfo *REGISTER_VOLUME_INFO) (r utils.BFSS_RESULT, err error)
  // Parameters:
  //  - Status
  UpdateVolume(ctx context.Context, Status *UPDATE_VOLUME_STATUS) (r utils.BFSS_RESULT, err error)
  // Parameters:
  //  - VolumeId
  GetVolumeInfo(ctx context.Context, VolumeId int32) (r *VOLUME_RESULT, err error)
  GetAllVolumeInfo(ctx context.Context) (r *ALL_VOLUME_RESULT, err error)
  // Parameters:
  //  - Size
  AllocateBlks(ctx context.Context, size int32) (r *ALLOCATED_RESULT, err error)
  // Parameters:
  //  - AllocatedInfo
  AddBlkChip(ctx context.Context, Allocated_info *ALLOCATED_INFO) (r utils.BFSS_RESULT, err error)
}

type BFSS_REGMDClient struct {
  c thrift.TClient
}

func NewBFSS_REGMDClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BFSS_REGMDClient {
  return &BFSS_REGMDClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBFSS_REGMDClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BFSS_REGMDClient {
  return &BFSS_REGMDClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBFSS_REGMDClient(c thrift.TClient) *BFSS_REGMDClient {
  return &BFSS_REGMDClient{
    c: c,
  }
}

func (p *BFSS_REGMDClient) Client_() thrift.TClient {
  return p.c
}
func (p *BFSS_REGMDClient) GetVersion(ctx context.Context) (r string, err error) {
  var _args1 BFSS_REGMDGetVersionArgs
  var _result2 BFSS_REGMDGetVersionResult
  if err = p.Client_().Call(ctx, "GetVersion", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - CmdId
//  - Param
//  - Data
func (p *BFSS_REGMDClient) ManageMessage(ctx context.Context, CmdId utils.BFSS_CMD, Param int32, Data []byte) (r *utils.MESSAGE_RESULT, err error) {
  var _args3 BFSS_REGMDManageMessageArgs
  _args3.CmdId = CmdId
  _args3.Param = Param
  _args3.Data = Data
  var _result4 BFSS_REGMDManageMessageResult
  if err = p.Client_().Call(ctx, "ManageMessage", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - VolumeInfo
func (p *BFSS_REGMDClient) RegisterVolume(ctx context.Context, VolumeInfo *REGISTER_VOLUME_INFO) (r utils.BFSS_RESULT, err error) {
  var _args5 BFSS_REGMDRegisterVolumeArgs
  _args5.VolumeInfo = VolumeInfo
  var _result6 BFSS_REGMDRegisterVolumeResult
  if err = p.Client_().Call(ctx, "RegisterVolume", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Status
func (p *BFSS_REGMDClient) UpdateVolume(ctx context.Context, Status *UPDATE_VOLUME_STATUS) (r utils.BFSS_RESULT, err error) {
  var _args7 BFSS_REGMDUpdateVolumeArgs
  _args7.Status = Status
  var _result8 BFSS_REGMDUpdateVolumeResult
  if err = p.Client_().Call(ctx, "UpdateVolume", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - VolumeId
func (p *BFSS_REGMDClient) GetVolumeInfo(ctx context.Context, VolumeId int32) (r *VOLUME_RESULT, err error) {
  var _args9 BFSS_REGMDGetVolumeInfoArgs
  _args9.VolumeId = VolumeId
  var _result10 BFSS_REGMDGetVolumeInfoResult
  if err = p.Client_().Call(ctx, "GetVolumeInfo", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

func (p *BFSS_REGMDClient) GetAllVolumeInfo(ctx context.Context) (r *ALL_VOLUME_RESULT, err error) {
  var _args11 BFSS_REGMDGetAllVolumeInfoArgs
  var _result12 BFSS_REGMDGetAllVolumeInfoResult
  if err = p.Client_().Call(ctx, "GetAllVolumeInfo", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - Size
func (p *BFSS_REGMDClient) AllocateBlks(ctx context.Context, size int32) (r *ALLOCATED_RESULT, err error) {
  var _args13 BFSS_REGMDAllocateBlksArgs
  _args13.Size = size
  var _result14 BFSS_REGMDAllocateBlksResult
  if err = p.Client_().Call(ctx, "AllocateBlks", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - AllocatedInfo
func (p *BFSS_REGMDClient) AddBlkChip(ctx context.Context, Allocated_info *ALLOCATED_INFO) (r utils.BFSS_RESULT, err error) {
  var _args15 BFSS_REGMDAddBlkChipArgs
  _args15.AllocatedInfo = Allocated_info
  var _result16 BFSS_REGMDAddBlkChipResult
  if err = p.Client_().Call(ctx, "AddBlkChip", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

type BFSS_REGMDProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BFSS_REGMD
}

func (p *BFSS_REGMDProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BFSS_REGMDProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BFSS_REGMDProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBFSS_REGMDProcessor(handler BFSS_REGMD) *BFSS_REGMDProcessor {

  self17 := &BFSS_REGMDProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self17.processorMap["GetVersion"] = &bFSS_REGMDProcessorGetVersion{handler:handler}
  self17.processorMap["ManageMessage"] = &bFSS_REGMDProcessorManageMessage{handler:handler}
  self17.processorMap["RegisterVolume"] = &bFSS_REGMDProcessorRegisterVolume{handler:handler}
  self17.processorMap["UpdateVolume"] = &bFSS_REGMDProcessorUpdateVolume{handler:handler}
  self17.processorMap["GetVolumeInfo"] = &bFSS_REGMDProcessorGetVolumeInfo{handler:handler}
  self17.processorMap["GetAllVolumeInfo"] = &bFSS_REGMDProcessorGetAllVolumeInfo{handler:handler}
  self17.processorMap["AllocateBlks"] = &bFSS_REGMDProcessorAllocateBlks{handler:handler}
  self17.processorMap["AddBlkChip"] = &bFSS_REGMDProcessorAddBlkChip{handler:handler}
return self17
}

func (p *BFSS_REGMDProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x18.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x18

}

type bFSS_REGMDProcessorGetVersion struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorGetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDGetVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVersion(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVersion: " + err2.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorManageMessage struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorManageMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDManageMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDManageMessageResult{}
var retval *utils.MESSAGE_RESULT
  var err2 error
  if retval, err2 = p.handler.ManageMessage(ctx, args.CmdId, args.Param, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ManageMessage: " + err2.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ManageMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorRegisterVolume struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorRegisterVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDRegisterVolumeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterVolume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDRegisterVolumeResult{}
var retval utils.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.RegisterVolume(ctx, args.VolumeInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterVolume: " + err2.Error())
    oprot.WriteMessageBegin("RegisterVolume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("RegisterVolume", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorUpdateVolume struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorUpdateVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDUpdateVolumeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateVolume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDUpdateVolumeResult{}
var retval utils.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.UpdateVolume(ctx, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVolume: " + err2.Error())
    oprot.WriteMessageBegin("UpdateVolume", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UpdateVolume", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorGetVolumeInfo struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorGetVolumeInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDGetVolumeInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetVolumeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDGetVolumeInfoResult{}
var retval *VOLUME_RESULT
  var err2 error
  if retval, err2 = p.handler.GetVolumeInfo(ctx, args.VolumeId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVolumeInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetVolumeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetVolumeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorGetAllVolumeInfo struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorGetAllVolumeInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDGetAllVolumeInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAllVolumeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDGetAllVolumeInfoResult{}
var retval *ALL_VOLUME_RESULT
  var err2 error
  if retval, err2 = p.handler.GetAllVolumeInfo(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllVolumeInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetAllVolumeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAllVolumeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorAllocateBlks struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorAllocateBlks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDAllocateBlksArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AllocateBlks", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDAllocateBlksResult{}
var retval *ALLOCATED_RESULT
  var err2 error
  if retval, err2 = p.handler.AllocateBlks(ctx, args.Size); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AllocateBlks: " + err2.Error())
    oprot.WriteMessageBegin("AllocateBlks", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AllocateBlks", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_REGMDProcessorAddBlkChip struct {
  handler BFSS_REGMD
}

func (p *bFSS_REGMDProcessorAddBlkChip) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_REGMDAddBlkChipArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddBlkChip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_REGMDAddBlkChipResult{}
var retval utils.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.AddBlkChip(ctx, args.AllocatedInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddBlkChip: " + err2.Error())
    oprot.WriteMessageBegin("AddBlkChip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("AddBlkChip", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BFSS_REGMDGetVersionArgs struct {
}

func NewBFSS_REGMDGetVersionArgs() *BFSS_REGMDGetVersionArgs {
  return &BFSS_REGMDGetVersionArgs{}
}

func (p *BFSS_REGMDGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDGetVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDGetVersionResult() *BFSS_REGMDGetVersionResult {
  return &BFSS_REGMDGetVersionResult{}
}

var BFSS_REGMDGetVersionResult_Success_DEFAULT string
func (p *BFSS_REGMDGetVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BFSS_REGMDGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_REGMDGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BFSS_REGMDGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetVersionResult(%+v)", *p)
}

// Attributes:
//  - CmdId
//  - Param
//  - Data
type BFSS_REGMDManageMessageArgs struct {
  CmdId utils.BFSS_CMD `thrift:"CmdId,1" db:"CmdId" json:"CmdId"`
  Param int32 `thrift:"Param,2" db:"Param" json:"Param"`
  Data []byte `thrift:"Data,3" db:"Data" json:"Data"`
}

func NewBFSS_REGMDManageMessageArgs() *BFSS_REGMDManageMessageArgs {
  return &BFSS_REGMDManageMessageArgs{}
}


func (p *BFSS_REGMDManageMessageArgs) GetCmdId() utils.BFSS_CMD {
  return p.CmdId
}

func (p *BFSS_REGMDManageMessageArgs) GetParam() int32 {
  return p.Param
}

func (p *BFSS_REGMDManageMessageArgs) GetData() []byte {
  return p.Data
}
func (p *BFSS_REGMDManageMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDManageMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := utils.BFSS_CMD(v)
  p.CmdId = temp
}
  return nil
}

func (p *BFSS_REGMDManageMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *BFSS_REGMDManageMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_REGMDManageMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDManageMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CmdId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CmdId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CmdId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CmdId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CmdId: ", p), err) }
  return err
}

func (p *BFSS_REGMDManageMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Param", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Param: ", p), err) }
  if err := oprot.WriteI32(int32(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Param (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Param: ", p), err) }
  return err
}

func (p *BFSS_REGMDManageMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err) }
  return err
}

func (p *BFSS_REGMDManageMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDManageMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDManageMessageResult struct {
  Success *utils.MESSAGE_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDManageMessageResult() *BFSS_REGMDManageMessageResult {
  return &BFSS_REGMDManageMessageResult{}
}

var BFSS_REGMDManageMessageResult_Success_DEFAULT *utils.MESSAGE_RESULT
func (p *BFSS_REGMDManageMessageResult) GetSuccess() *utils.MESSAGE_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDManageMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_REGMDManageMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDManageMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDManageMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &utils.MESSAGE_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_REGMDManageMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDManageMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDManageMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDManageMessageResult(%+v)", *p)
}

// Attributes:
//  - VolumeInfo
type BFSS_REGMDRegisterVolumeArgs struct {
  VolumeInfo *REGISTER_VOLUME_INFO `thrift:"VolumeInfo,1" db:"VolumeInfo" json:"VolumeInfo"`
}

func NewBFSS_REGMDRegisterVolumeArgs() *BFSS_REGMDRegisterVolumeArgs {
  return &BFSS_REGMDRegisterVolumeArgs{}
}

var BFSS_REGMDRegisterVolumeArgs_VolumeInfo_DEFAULT *REGISTER_VOLUME_INFO
func (p *BFSS_REGMDRegisterVolumeArgs) GetVolumeInfo() *REGISTER_VOLUME_INFO {
  if !p.IsSetVolumeInfo() {
    return BFSS_REGMDRegisterVolumeArgs_VolumeInfo_DEFAULT
  }
return p.VolumeInfo
}
func (p *BFSS_REGMDRegisterVolumeArgs) IsSetVolumeInfo() bool {
  return p.VolumeInfo != nil
}

func (p *BFSS_REGMDRegisterVolumeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDRegisterVolumeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.VolumeInfo = &REGISTER_VOLUME_INFO{}
  if err := p.VolumeInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VolumeInfo), err)
  }
  return nil
}

func (p *BFSS_REGMDRegisterVolumeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterVolume_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDRegisterVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:VolumeInfo: ", p), err) }
  if err := p.VolumeInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VolumeInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:VolumeInfo: ", p), err) }
  return err
}

func (p *BFSS_REGMDRegisterVolumeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDRegisterVolumeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDRegisterVolumeResult struct {
  Success *utils.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDRegisterVolumeResult() *BFSS_REGMDRegisterVolumeResult {
  return &BFSS_REGMDRegisterVolumeResult{}
}

var BFSS_REGMDRegisterVolumeResult_Success_DEFAULT utils.BFSS_RESULT
func (p *BFSS_REGMDRegisterVolumeResult) GetSuccess() utils.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDRegisterVolumeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_REGMDRegisterVolumeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDRegisterVolumeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDRegisterVolumeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_REGMDRegisterVolumeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterVolume_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDRegisterVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDRegisterVolumeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDRegisterVolumeResult(%+v)", *p)
}

// Attributes:
//  - Status
type BFSS_REGMDUpdateVolumeArgs struct {
  Status *UPDATE_VOLUME_STATUS `thrift:"Status,1" db:"Status" json:"Status"`
}

func NewBFSS_REGMDUpdateVolumeArgs() *BFSS_REGMDUpdateVolumeArgs {
  return &BFSS_REGMDUpdateVolumeArgs{}
}

var BFSS_REGMDUpdateVolumeArgs_Status_DEFAULT *UPDATE_VOLUME_STATUS
func (p *BFSS_REGMDUpdateVolumeArgs) GetStatus() *UPDATE_VOLUME_STATUS {
  if !p.IsSetStatus() {
    return BFSS_REGMDUpdateVolumeArgs_Status_DEFAULT
  }
return p.Status
}
func (p *BFSS_REGMDUpdateVolumeArgs) IsSetStatus() bool {
  return p.Status != nil
}

func (p *BFSS_REGMDUpdateVolumeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDUpdateVolumeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &UPDATE_VOLUME_STATUS{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *BFSS_REGMDUpdateVolumeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateVolume_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDUpdateVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err) }
  return err
}

func (p *BFSS_REGMDUpdateVolumeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDUpdateVolumeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDUpdateVolumeResult struct {
  Success *utils.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDUpdateVolumeResult() *BFSS_REGMDUpdateVolumeResult {
  return &BFSS_REGMDUpdateVolumeResult{}
}

var BFSS_REGMDUpdateVolumeResult_Success_DEFAULT utils.BFSS_RESULT
func (p *BFSS_REGMDUpdateVolumeResult) GetSuccess() utils.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDUpdateVolumeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_REGMDUpdateVolumeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDUpdateVolumeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDUpdateVolumeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_REGMDUpdateVolumeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateVolume_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDUpdateVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDUpdateVolumeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDUpdateVolumeResult(%+v)", *p)
}

// Attributes:
//  - VolumeId
type BFSS_REGMDGetVolumeInfoArgs struct {
  VolumeId int32 `thrift:"VolumeId,1" db:"VolumeId" json:"VolumeId"`
}

func NewBFSS_REGMDGetVolumeInfoArgs() *BFSS_REGMDGetVolumeInfoArgs {
  return &BFSS_REGMDGetVolumeInfoArgs{}
}


func (p *BFSS_REGMDGetVolumeInfoArgs) GetVolumeId() int32 {
  return p.VolumeId
}
func (p *BFSS_REGMDGetVolumeInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVolumeInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:VolumeId: ", p), err) }
  return err
}

func (p *BFSS_REGMDGetVolumeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetVolumeInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDGetVolumeInfoResult struct {
  Success *VOLUME_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDGetVolumeInfoResult() *BFSS_REGMDGetVolumeInfoResult {
  return &BFSS_REGMDGetVolumeInfoResult{}
}

var BFSS_REGMDGetVolumeInfoResult_Success_DEFAULT *VOLUME_RESULT
func (p *BFSS_REGMDGetVolumeInfoResult) GetSuccess() *VOLUME_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDGetVolumeInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_REGMDGetVolumeInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDGetVolumeInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VOLUME_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVolumeInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetVolumeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDGetVolumeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetVolumeInfoResult(%+v)", *p)
}

type BFSS_REGMDGetAllVolumeInfoArgs struct {
}

func NewBFSS_REGMDGetAllVolumeInfoArgs() *BFSS_REGMDGetAllVolumeInfoArgs {
  return &BFSS_REGMDGetAllVolumeInfoArgs{}
}

func (p *BFSS_REGMDGetAllVolumeInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetAllVolumeInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllVolumeInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetAllVolumeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetAllVolumeInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDGetAllVolumeInfoResult struct {
  Success *ALL_VOLUME_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDGetAllVolumeInfoResult() *BFSS_REGMDGetAllVolumeInfoResult {
  return &BFSS_REGMDGetAllVolumeInfoResult{}
}

var BFSS_REGMDGetAllVolumeInfoResult_Success_DEFAULT *ALL_VOLUME_RESULT
func (p *BFSS_REGMDGetAllVolumeInfoResult) GetSuccess() *ALL_VOLUME_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDGetAllVolumeInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_REGMDGetAllVolumeInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDGetAllVolumeInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDGetAllVolumeInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ALL_VOLUME_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_REGMDGetAllVolumeInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllVolumeInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDGetAllVolumeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDGetAllVolumeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDGetAllVolumeInfoResult(%+v)", *p)
}

// Attributes:
//  - Size
type BFSS_REGMDAllocateBlksArgs struct {
  Size int32 `thrift:"size,1" db:"size" json:"size"`
}

func NewBFSS_REGMDAllocateBlksArgs() *BFSS_REGMDAllocateBlksArgs {
  return &BFSS_REGMDAllocateBlksArgs{}
}


func (p *BFSS_REGMDAllocateBlksArgs) GetSize() int32 {
  return p.Size
}
func (p *BFSS_REGMDAllocateBlksArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDAllocateBlksArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_REGMDAllocateBlksArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AllocateBlks_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDAllocateBlksArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:size: ", p), err) }
  return err
}

func (p *BFSS_REGMDAllocateBlksArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDAllocateBlksArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDAllocateBlksResult struct {
  Success *ALLOCATED_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDAllocateBlksResult() *BFSS_REGMDAllocateBlksResult {
  return &BFSS_REGMDAllocateBlksResult{}
}

var BFSS_REGMDAllocateBlksResult_Success_DEFAULT *ALLOCATED_RESULT
func (p *BFSS_REGMDAllocateBlksResult) GetSuccess() *ALLOCATED_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDAllocateBlksResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_REGMDAllocateBlksResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDAllocateBlksResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDAllocateBlksResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ALLOCATED_RESULT{
  Result_:   -255,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_REGMDAllocateBlksResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AllocateBlks_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDAllocateBlksResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDAllocateBlksResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDAllocateBlksResult(%+v)", *p)
}

// Attributes:
//  - AllocatedInfo
type BFSS_REGMDAddBlkChipArgs struct {
  AllocatedInfo *ALLOCATED_INFO `thrift:"Allocated_info,1" db:"Allocated_info" json:"Allocated_info"`
}

func NewBFSS_REGMDAddBlkChipArgs() *BFSS_REGMDAddBlkChipArgs {
  return &BFSS_REGMDAddBlkChipArgs{}
}

var BFSS_REGMDAddBlkChipArgs_AllocatedInfo_DEFAULT *ALLOCATED_INFO
func (p *BFSS_REGMDAddBlkChipArgs) GetAllocatedInfo() *ALLOCATED_INFO {
  if !p.IsSetAllocatedInfo() {
    return BFSS_REGMDAddBlkChipArgs_AllocatedInfo_DEFAULT
  }
return p.AllocatedInfo
}
func (p *BFSS_REGMDAddBlkChipArgs) IsSetAllocatedInfo() bool {
  return p.AllocatedInfo != nil
}

func (p *BFSS_REGMDAddBlkChipArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDAddBlkChipArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AllocatedInfo = &ALLOCATED_INFO{}
  if err := p.AllocatedInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AllocatedInfo), err)
  }
  return nil
}

func (p *BFSS_REGMDAddBlkChipArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddBlkChip_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDAddBlkChipArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Allocated_info", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Allocated_info: ", p), err) }
  if err := p.AllocatedInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AllocatedInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Allocated_info: ", p), err) }
  return err
}

func (p *BFSS_REGMDAddBlkChipArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDAddBlkChipArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_REGMDAddBlkChipResult struct {
  Success *utils.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_REGMDAddBlkChipResult() *BFSS_REGMDAddBlkChipResult {
  return &BFSS_REGMDAddBlkChipResult{}
}

var BFSS_REGMDAddBlkChipResult_Success_DEFAULT utils.BFSS_RESULT
func (p *BFSS_REGMDAddBlkChipResult) GetSuccess() utils.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_REGMDAddBlkChipResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_REGMDAddBlkChipResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_REGMDAddBlkChipResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_REGMDAddBlkChipResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := utils.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_REGMDAddBlkChipResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddBlkChip_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_REGMDAddBlkChipResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_REGMDAddBlkChipResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_REGMDAddBlkChipResult(%+v)", *p)
}


